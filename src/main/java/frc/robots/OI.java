// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robots;

import frc.robots.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robots.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton habLiftButton;
    public Joystick xboxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxController = new Joystick(1);
        
        habLiftButton = new JoystickButton(xboxController, 1);
        habLiftButton.whileHeld(new HabLift());


        // SmartDashboard Buttons
        SmartDashboard.putData("LiftToPos1", new LiftToPos1());
        SmartDashboard.putData("LiftToPos2", new LiftToPos2());
        SmartDashboard.putData("LiftToPos3", new LiftToPos3());
        SmartDashboard.putData("ClawOpen", new ClawOpen());
        SmartDashboard.putData("ClawClose", new ClawClose());
        SmartDashboard.putData("PlaceDisk", new PlaceDisk());
        SmartDashboard.putData("CenterLeft", new CenterLeft());
        SmartDashboard.putData("CenterRight", new CenterRight());
        SmartDashboard.putData("PlaceBallLow", new PlaceBallLow());
        SmartDashboard.putData("PlaceBallMiddle", new PlaceBallMiddle());
        SmartDashboard.putData("PlaceBallHigh", new PlaceBallHigh());
        SmartDashboard.putData("PlaceDiskLow", new PlaceDiskLow());
        SmartDashboard.putData("PlaceDiskMiddle", new PlaceDiskMiddle());
        SmartDashboard.putData("PlaceDiskHigh", new PlaceDiskHigh());
        SmartDashboard.putData("HabLift", new HabLift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXboxController() {
        return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

